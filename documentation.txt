# basic.html

- The `<!doctype html>` tag indicates that this is an HTML file and specifies the document type.
- The `<html>` tag contains the entire HTML content, with the `lang` attribute set to "en" for English.
- The `<head>` tag contains metadata about the document, including the character encoding, viewport settings, and links to external stylesheets and JavaScript files.
- The `<meta>` tag provides metadata about the HTML document. The `charset` attribute specifies the character encoding, and the `viewport` attribute sets the width and scaling for mobile devices.
- The `<link>` tag is used to link to an external stylesheet.
- The `{% block title %}` and `{% endblock %}` tags define a block for the title of the page.
- The `{% block css %}` and `{% endblock %}` tags define a block for CSS.
- The `<nav>` tag contains the navigation bar for the website.
- The `navbar-expand-lg` class makes the navigation bar responsive, with a collapsed menu on smaller screens.
- The `navbar-dark bg-dark` classes define the color scheme for the navigation bar.
- The `fixed-top` class makes the navigation bar fixed at the top of the screen.
- The `data-toggle` and `data-target` attributes are used to create a dropdown menu for the "Welcome" link.
- The `{% block homeactive %}` and `{% endblock homeactive %}` tags define a block for the "Home" link.
- The `if user.is_authenticated` statement checks if the user is logged in.
- The `{% block profileactive %}` and `{% endblock profileactive %}` tags define a block for the "Profile" link.
- The `{% block registeractive %}` and `{% endblock registeractive %}` tags define a block for the "Register" link.
- The `{% block loginactive %}` and `{% endblock loginactive %}` tags define a block for the "Login" link.
- The `<form>` tag creates a search bar.
- The `{% url 'search_results' %}` tag generates the URL for the search results page.
- The `{% block body %}` and `{% endblock %}` tags define a block for the body of the HTML document.
- The `<script>` tags link to external JavaScript files.
- The `{% block js %}` and `{% endblock %}` tags define a block for JavaScript.

# discussion.html

In the first part, the template renders the post and displays the author's name, timestamp, and the post content. It also includes a button to open a modal that allows a user to reply to the post.

In the second part, the template iterates over each reply to the post and displays the reply author's name, timestamp, and the reply content.

In the last part, the template includes a modal that allows authenticated users to post a reply to the post. The modal consists of a form that takes the post ID and reply content as input. It also includes client-side JavaScript that displays an alert when the user successfully posts a reply.

To modify the template, you can change the HTML structure, add or remove form fields, modify the client-side JavaScript, and customize the CSS styles. Additionally, you can use Django's template language to add conditional statements, loops, and filters to dynamically render the HTML.

- `extends`: This keyword is used to extend a base template. In this case, the template is extending the 'basic.html' template.
- `block`: This keyword is used to define a section of the template that can be overridden in the child template. In this case, the template has three blocks defined: `title`, `css`, and `body`.
- `{{...}}`: This syntax is used to output a variable value in the template.
- `{%...%}`: This syntax is used to include a Django template tag, which performs some specific operation, such as looping through data or conditionally rendering content.
- `if` statement: This syntax is used to conditionally render content in the template. In this case, it is used to check if the user is authenticated before showing the reply form.
- `for` loop: This syntax is used to loop through a set of data and render content for each item. In this case, it is used to loop through the `replies` list and display each reply.
- `data-abc`: This syntax is used to add custom data attributes to an HTML tag.
- `data-toggle` and `data-target`: These attributes are used to open a Bootstrap modal dialog.
- `{{post.image}}`, `{{post.user1}}`, `{{post.timestamp}}`, and `{{post.post_content}}`: These are variables that are passed from the view to the template and are used to render the content of the post.
- `{{reply.image}}`, `{{reply.user}}`, `{{reply.timestamp}}`, and `{{reply.reply_content}}`: These are variables that are passed from the view to the template and are used to render the content of each reply.
- `action`: This attribute is used to specify the URL that the form data should be submitted to.
- `{% csrf_token %}`: This is a Django template tag that is used to include a hidden input field with a CSRF token, which is used to protect against cross-site request forgery attacks.
- `type`, `class`, and `data-dismiss`: These attributes are used to specify the type, CSS class, and behavior of the close button in the modal dialog.
- `type`, `class`, and `data-target`: These attributes are used to specify the type, CSS class, and target of the post button in the modal dialog.
- `alert`, `document.location`: These are JavaScript functions that are used to show an alert message and redirect the user to the home page after posting a reply.

# forum.html

The extended template defines several blocks, including 'title', 'homeactive', 'css', and 'body'. The 'title' block sets the page title to "Forum". The 'homeactive' block adds the 'active' class to the Home link in the navbar. The 'css' block sets the CSS style of various elements, including the body, margins, fonts, and card styles. The 'body' block defines the content of the page, including a Jumbotron heading and a loop that displays a list of posts, each with an image, username, timestamp, and content. The template also includes a modal form that is displayed when a user clicks the 'Add Post' button. If the user is not authenticated, the template displays a message asking them to log in.

It extends a `basic.html` file and overrides the `title`, `homeactive`, `css`, and `body` blocks. The `css` block contains CSS styles for the template, and the `body`block contains the content of the page. The `for` loop in the `body` block iterates over a list of `posts` and displays them on the page using Bootstrap cards. It also includes a Bootstrap modal for adding a new post, which is only visible to authenticated users.

# login.html

`login.html` is a Django template that is used to render a login page. It extends the `basic.html` template, which means that any content in `basic.html` will be included in the final rendered page.

The template uses the `{% block %}` syntax to define sections of the template that can be overridden in child templates. For example, `{% block title %}` is used to define the title of the page. This block can be overridden in child templates to set a custom page title.

The CSS for the login page is included within the template using the `{% block css %}` syntax. This block can be overridden in child templates to include custom CSS for the login page.

The `{% for %}` loop is used to iterate over any messages that were passed to the template using the `messages` variable. These messages are typically error messages or status messages that are displayed to the user. The `alert` class is used to style the message as an alert box.

The main content of the template is contained within the `{% block body %}` block. The login form is displayed using an HTML form element. The form has a `method` attribute set to `post`, which means that the form data will be sent to the server using an HTTP POST request.

The `action` attribute of the form specifies the URL that the form data should be submitted to. In this case, it is set to `/login/`. The `{% csrf_token %}` template tag is used to include a CSRF token in the form. This is a security feature that helps protect against cross-site request forgery (CSRF) attacks.

The form includes two input fields: one for the username and one for the password. The `type` attribute of the inputs is set to `text` and `password`, respectively. The `name` attribute is used to identify the input fields in the submitted form data.

The final input is a submit button that the user clicks to submit the form. Its `name` attribute is set to `signup_submit` and its `value` attribute is set to `Log In`.

The template can be modified by adding or removing blocks or by changing the content of existing blocks. The CSS for the login page can be modified by adding or changing rules in the `{% block css %}` block. The form can be modified by changing the attributes of the form element or the input fields.

# profile.html

The `profile.html` file is a Django template file that is used to display a user's profile information. It extends the `basic.html` template file and overrides certain blocks with specific content.

The `{% extends 'basic.html' %}` line tells Django to extend the `basic.html` template file.

The `{% block title %} Profile {% endblock %}` line defines a block named `title` and sets its content to the string "Profile". This block is then used in the `basic.html` file to set the title of the page.

The `{% block profileactive %} active {% endblock profileactive %}` line defines a block named `profileactive` and sets its content to the string "active". This block is used to highlight the "Profile" link in the navigation bar.

The `{% block css %}{% endblock %}` line defines a block named `css`, which is empty in this file. This block can be used to include CSS styles specific to this template file.

The `{% for message in messages %} ... {% endfor %}` loop iterates over a list of messages and displays each one as an alert.

The remaining content of the file is HTML and Django template tags. It displays the user's profile information, including their username, full name, and email, as well as a form for uploading a profile photo. The form uses the `POST` method and includes a CSRF token to protect against cross-site request forgery attacks. The user's profile photo is displayed using an image tag that sources the image from the user's profile image URL.

# register.html

This is a Django template file written in the Django Template Language (DTL), which is used to render the HTML pages for a Django web application.

The template file extends a base template called 'basic.html' using the `{% extends %}` tag, which means it inherits all the content and block definitions from the parent template.

The `{% block %}` tags define named blocks that can be overridden in child templates that extend this template. For example, the child template can define a block named "title" using the same syntax, and the content of that block will replace the content of the "title" block in this template.

The CSS code between the `{% block css %}` and `{% endblock %}` tags defines the styles that will be used on the page. The CSS styles are written using standard CSS syntax, and can be modified to change the appearance of the page.

The content of the page is defined between the `{% block body %}` and `{% endblock %}` tags. The `{% for %}` tag is used to loop through any messages passed to the template through the `messages` variable, and display them as alert messages using Bootstrap CSS classes.

The main content of the page is a registration form that uses the HTTP POST method to submit data to the `/register/` URL. The form includes input fields for the user's username, email, first name, last name, password, and confirm password. The CSRF token is included using the `{% csrf_token %}` tag to protect against cross-site request forgery attacks.

The input fields are styled using the CSS defined in the template. The submit button is positioned using absolute positioning and a left margin, and its appearance and behavior are defined using CSS as well.

The content of this template can be modified by changing the HTML and CSS code, and by adding or removing blocks and tags as needed. The form fields can also be modified to collect different information or to use different validation rules.

# search_results.html

This is a basic HTML form for searching, which is used in the `search_results.html` template. The form uses the `form-inline` class from Bootstrap to display the input and button inline.

The `method` attribute is set to "get", which means that the form data will be sent as URL parameters in the browser's address bar, instead of being posted in the body of an HTTP request.

The `action` attribute is set to the URL for the `search_results` view using the `{% url %}` template tag, which generates the URL based on the URL pattern defined in the project's `urls.py` file.

The input field has a placeholder attribute to provide a hint to the user on what to enter in the field. The `name` attribute is set to "q" which is the query parameter that is expected by the view.

The `value` attribute is set to the `query` variable, which is passed from the view to the template and contains the user's search query.

The button is a basic Bootstrap button with a green outline and the "Search" label. When clicked, it submits the form to the URL specified in the `action` attribute.

```python
from django.db import models
from django.contrib.auth.models import User
from django.utils.timezone import now

# Create your models here.
class Profile(models.Model):
    user = models.OneToOneField(User, null=True, blank=True, on_delete=models.CASCADE)    
    image = models.ImageField(upload_to="images",default="default/user.png")
    
    
class Post(models.Model):
    user1 = models.ForeignKey(User, on_delete=models.CASCADE, default=1)
    post_id = models.AutoField
    post_content = models.CharField(max_length=5000)
    timestamp= models.DateTimeField(default=now)
    image = models.ImageField(upload_to="images",default="")
    
class Replie(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE, default=1)
    reply_id = models.AutoField
    reply_content = models.CharField(max_length=5000) 
    post = models.ForeignKey(Post, on_delete=models.CASCADE, default='')
    timestamp= models.DateTimeField(default=now)
    image = models.ImageField(upload_to="images",default="")
```

# models.py

Profile Model

The Profile model consists of two fields:

- `user`: A `OneToOneField` which references the `User` model.
- `image`: An `ImageField` which is used to store the user's profile image.

Post Model

The Post model consists of five fields:

- `user1`: A `ForeignKey` which references the `User` model.
- `post_id`: An `AutoField` which is used to store the post's unique ID.
- `post_content`: A `CharField` which stores the contents of the post.
- `timestamp`: A `DateTimeField` which stores the date and time the post was created.
- `image`: An `ImageField` which is used to store the post's image, if any.

Replie Model

The Replie model consists of five fields:

- `user`: A `ForeignKey` which references the `User` model.
- `reply_id`: An `AutoField` which is used to store the reply's unique ID.
- `reply_content`: A `CharField` which stores the contents of the reply.
- `post`: A `ForeignKey` which references the Post model.
- `timestamp`: A `DateTimeField` which stores the date and time the reply was created.
- `image`: An `ImageField` which is used to store the reply's image, if any.

# views.py

1. forum(request): This function handles the requests to the forum page. It takes the content of the new post and saves it to the database. It also retrieves all the posts from the database and displays them on the page.
2. discussion(request, myid): This function handles the requests to the discussion page of a specific post. It takes the content of the new reply and saves it to the database. It also retrieves the specific post and all its replies from the database and displays them on the page.
3. UserRegister(request): This function handles the requests to the registration page. It takes the user's input for username, email, first name, last name, and password, validates them, creates a new user in the database, and redirects to the login page.
4. UserLogin(request): This function handles the requests to the login page. It takes the user's input for username and password, authenticates the user, and logs them in. If authentication fails, it displays an error message.
5. UserLogout(request): This function handles the requests to the logout page. It logs out the user and redirects to the login page.
6. myprofile(request): This function handles the requests to the user's profile page. It retrieves the user's profile from the database and displays it. If the user updates their profile, it saves the updated information to the database.
7. search_results(request): This function handles the requests to the search results page. It takes the user's search query, retrieves all the posts that contain the query, and displays them on the page.

# forms.py

`ProfileForm` is a model form that inherits from `forms.ModelForm` and is used to update the user's profile image. It has only one field, `image`, which is taken from the `Profile` model.

`SearchForm` is a basic form that inherits from `forms.Form` and is used to implement search functionality. It has only one field, `query`, which is a `CharField` that accepts a search query. The field has a `widget` that specifies how the search box should be displayed in the HTML template.

# admin.py

The `admin`
 module is imported from `django.contrib`
. Then the models `Post`
, `Replie`
, and `Profile`
 are imported from the app's `models.py`
 file. These models are then registered with the admin site using `admin.site.register()`
, which allows them to be managed through the Django admin interface.

# urls.py

This is the `urls.py` file which defines the URL patterns for the application. Here's a breakdown of what each line does:

- `from django.urls import path`: Import the `path` function from the `django.urls` module.
- `from . import views`: Import the views module from the current package.
- `urlpatterns`: A list of URL patterns for the application.
- `path("", views.forum, name="Forum")`: The URL pattern for the `forum` view. The empty string `""` means that this view will be the default view for the application. `views.forum` refers to the `forum` function in the views module. `name="Forum"` gives a name to this URL pattern that can be used to reference it in the application.
- `path("discussion/<int:myid>/", views.discussion, name="Discussions")`: The URL pattern for the `discussion` view. The `int:myid` captures an integer value from the URL and assigns it to the variable `myid`. The captured value can then be used in the `discussion` view. The `name` parameter gives a name to the URL pattern that can be used to reference it in the application.
- `path("register/", views.UserRegister, name="Register")`: The URL pattern for the `UserRegister` view. This view will be used for registering new users.
- `path("login/", views.UserLogin, name="Login")`: The URL pattern for the `UserLogin` view. This view will be used for logging in existing users.
- `path("logout/", views.UserLogout, name="Logout")`: The URL pattern for the `UserLogout` view. This view will be used for logging out users.
- `path("myprofile/", views.myprofile, name="Myprofile")`: The URL pattern for the `myprofile` view. This view will be used for displaying a user's profile.
- `path('search/', views.search_results, name='search_results')`: The URL pattern for the `search_results` view. This view will be used for displaying search results.